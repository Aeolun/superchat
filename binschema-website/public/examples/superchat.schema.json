{
  "config": {
    "endianness": "big_endian"
  },
  "types": {
    "String": {
      "description": "Length-prefixed UTF-8 string",
      "type": "string",
      "kind": "length_prefixed",
      "length_type": "uint16",
      "encoding": "utf8"
    },
    "Optional<T>": {
      "description": "Optional field with presence byte",
      "sequence": [
        { "name": "present", "type": "uint8" },
        { "name": "value", "type": "T", "conditional": "present == 1" }
      ]
    },
    "FrameHeader": {
      "description": "All messages use this frame format",
      "sequence": [
        { "name": "length", "type": "uint32" },
        { "name": "version", "type": "uint8" },
        { "name": "type", "type": "uint8" },
        { "name": "flags", "type": "uint8" }
      ]
    },
    "AuthRequest": {
      "description": "Authentication request with password",
      "sequence": [
        { "name": "nickname", "type": "String" },
        { "name": "password", "type": "String" }
      ]
    },
    "AuthResponse": {
      "description": "Authentication response",
      "sequence": [
        { "name": "success", "type": "uint8" },
        { "name": "user_id", "type": "Optional<uint64>" },
        { "name": "nickname", "type": "Optional<String>" },
        { "name": "message", "type": "String" }
      ]
    },
    "SetNickname": {
      "description": "Set or change nickname",
      "sequence": [
        { "name": "nickname", "type": "String" }
      ]
    },
    "NicknameResponse": {
      "description": "Nickname change result",
      "sequence": [
        { "name": "success", "type": "uint8" },
        { "name": "message", "type": "String" }
      ]
    },
    "PostMessage": {
      "description": "Post a new message",
      "sequence": [
        { "name": "channel_id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" },
        { "name": "parent_id", "type": "Optional<uint64>" },
        { "name": "content", "type": "String" }
      ]
    },
    "MessagePosted": {
      "description": "Message post confirmation",
      "sequence": [
        { "name": "success", "type": "uint8" },
        { "name": "message_id", "type": "uint64" },
        { "name": "message", "type": "String" }
      ]
    },
    "NewMessage": {
      "description": "Real-time message notification",
      "sequence": [
        { "name": "message_id", "type": "uint64" },
        { "name": "channel_id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" },
        { "name": "parent_id", "type": "Optional<uint64>" },
        { "name": "author_user_id", "type": "Optional<uint64>" },
        { "name": "author_nickname", "type": "String" },
        { "name": "content", "type": "String" },
        { "name": "created_at", "type": "int64" },
        { "name": "edited_at", "type": "Optional<int64>" },
        { "name": "reply_count", "type": "uint32" }
      ]
    },
    "RegisterUser": {
      "description": "Register current nickname with password",
      "sequence": [
        { "name": "password_hash", "type": "String" }
      ]
    },
    "RegisterResponse": {
      "description": "Registration result",
      "sequence": [
        { "name": "success", "type": "uint8" },
        { "name": "user_id", "type": "Optional<uint64>" }
      ]
    },
    "ListChannels": {
      "description": "Request channel list",
      "sequence": [
        { "name": "from_channel_id", "type": "uint64" },
        { "name": "limit", "type": "uint16" }
      ]
    },
    "Channel": {
      "description": "Channel information in list",
      "sequence": [
        { "name": "channel_id", "type": "uint64" },
        { "name": "name", "type": "String" },
        { "name": "description", "type": "String" },
        { "name": "user_count", "type": "uint32" },
        { "name": "is_operator", "type": "uint8" },
        { "name": "type", "type": "uint8" },
        { "name": "retention_hours", "type": "uint32" }
      ]
    },
    "ChannelList": {
      "description": "List of channels",
      "sequence": [
        { "name": "channel_count", "type": "uint16" },
        {
          "name": "channels",
          "type": "array",
          "kind": "field_referenced",
          "length_field": "channel_count",
          "items": { "type": "Channel" }
        }
      ]
    },
    "JoinChannel": {
      "description": "Join a channel",
      "sequence": [
        { "name": "channel_id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" }
      ]
    },
    "JoinResponse": {
      "description": "Join result",
      "sequence": [
        { "name": "success", "type": "uint8" },
        { "name": "channel_id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" },
        { "name": "message", "type": "String" }
      ]
    },
    "ListMessages": {
      "description": "Request messages from channel",
      "sequence": [
        { "name": "channel_id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" },
        { "name": "limit", "type": "uint16" },
        { "name": "before_id", "type": "Optional<uint64>" },
        { "name": "parent_id", "type": "Optional<uint64>" },
        { "name": "after_id", "type": "Optional<uint64>" }
      ]
    },
    "Message": {
      "description": "Message in list",
      "sequence": [
        { "name": "message_id", "type": "uint64" },
        { "name": "channel_id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" },
        { "name": "parent_id", "type": "Optional<uint64>" },
        { "name": "author_user_id", "type": "Optional<uint64>" },
        { "name": "author_nickname", "type": "String" },
        { "name": "content", "type": "String" },
        { "name": "created_at", "type": "int64" },
        { "name": "edited_at", "type": "Optional<int64>" },
        { "name": "reply_count", "type": "uint32" }
      ]
    },
    "MessageList": {
      "description": "List of messages",
      "sequence": [
        { "name": "channel_id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" },
        { "name": "parent_id", "type": "Optional<uint64>" },
        { "name": "message_count", "type": "uint16" },
        {
          "name": "messages",
          "type": "array",
          "kind": "field_referenced",
          "length_field": "message_count",
          "items": { "type": "Message" }
        }
      ]
    },
    "Ping": {
      "description": "Keepalive heartbeat",
      "sequence": [
        { "name": "timestamp", "type": "int64" }
      ]
    },
    "Pong": {
      "description": "Ping response",
      "sequence": [
        { "name": "client_timestamp", "type": "int64" }
      ]
    },
    "SubscribeThread": {
      "description": "Subscribe to thread updates",
      "sequence": [
        { "name": "thread_id", "type": "uint64" }
      ]
    },
    "UnsubscribeThread": {
      "description": "Unsubscribe from thread updates",
      "sequence": [
        { "name": "thread_id", "type": "uint64" }
      ]
    },
    "SubscribeChannel": {
      "description": "Subscribe to new threads in channel",
      "sequence": [
        { "name": "channel_id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" }
      ]
    },
    "UnsubscribeChannel": {
      "description": "Unsubscribe from channel updates",
      "sequence": [
        { "name": "channel_id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" }
      ]
    },
    "SubscribeOk": {
      "description": "Subscription confirmation",
      "sequence": [
        { "name": "type", "type": "uint8" },
        { "name": "id", "type": "uint64" },
        { "name": "subchannel_id", "type": "Optional<uint64>" }
      ]
    },
    "Error": {
      "description": "Generic error response",
      "sequence": [
        { "name": "error_code", "type": "uint16" },
        { "name": "message", "type": "String" }
      ]
    },
    "ServerConfig": {
      "description": "Server configuration and limits",
      "sequence": [
        { "name": "protocol_version", "type": "uint8" },
        { "name": "max_message_rate", "type": "uint16" },
        { "name": "max_channel_creates", "type": "uint16" },
        { "name": "inactive_cleanup_days", "type": "uint16" },
        { "name": "max_connections_per_ip", "type": "uint8" },
        { "name": "max_message_length", "type": "uint32" },
        { "name": "max_thread_subs", "type": "uint16" },
        { "name": "max_channel_subs", "type": "uint16" },
        { "name": "directory_enabled", "type": "uint8" }
      ]
    }
  },
  "protocol": {
    "name": "SuperChat Protocol",
    "version": "1.0",
    "description": "A lightweight binary protocol for real-time threaded chat communication between SuperChat clients and servers.",
    "header": "FrameHeader",
    "header_size_field": "length",
    "header_example": {
      "decoded": {
        "version": 1,
        "type": 1,
        "flags": 0
      }
    },
    "discriminator": "type",
    "field_descriptions": {
      "FrameHeader.length": "Total size of Version + Type + Flags + Payload (excludes the length field itself)",
      "FrameHeader.version": "Protocol version (current: 1). Both client and server must validate on every message.",
      "FrameHeader.type": "Message type identifier (0x01-0xFF)",
      "FrameHeader.flags": "Bit flags: bit 0=compression (LZ4), bit 1=encryption, bits 2-7 reserved",
      "AuthRequest.nickname": "User's nickname (3-32 characters)",
      "AuthRequest.password": "User's password (8-128 characters, hashed with bcrypt)",
      "AuthResponse.success": "1 if authentication succeeded, 0 if failed",
      "AuthResponse.user_id": "The authenticated user's ID (only present if success=1)",
      "AuthResponse.nickname": "The authenticated user's registered nickname (only present if success=1)",
      "AuthResponse.message": "Welcome message on success, error description on failure",
      "SetNickname.nickname": "Desired nickname (3-32 characters, alphanumeric + underscore)",
      "NicknameResponse.success": "1 if nickname was set successfully, 0 if rejected",
      "NicknameResponse.message": "Confirmation message or error description (see notes for specific cases)",
      "PostMessage.channel_id": "Target channel ID",
      "PostMessage.subchannel_id": "Target subchannel ID (optional, for channels with subchannels)",
      "PostMessage.parent_id": "Parent message ID for threaded replies (null for top-level posts)",
      "PostMessage.content": "Message content (max 4000 characters)",
      "MessagePosted.success": "1 if message was posted successfully, 0 if failed",
      "MessagePosted.message_id": "The ID of the newly created message (only present if success=1)",
      "MessagePosted.message": "Confirmation message on success, error description on failure",
      "NewMessage.message_id": "Unique message ID",
      "NewMessage.channel_id": "Channel this message belongs to",
      "NewMessage.subchannel_id": "Subchannel ID (null if channel has no subchannels)",
      "NewMessage.parent_id": "Parent message ID (null for top-level messages)",
      "NewMessage.author_user_id": "User ID of the message author (null for anonymous users)",
      "NewMessage.author_nickname": "Nickname of the message author",
      "NewMessage.content": "Message text content",
      "NewMessage.created_at": "Unix timestamp in milliseconds (server time)",
      "NewMessage.edited_at": "Unix timestamp of last edit (null if never edited)",
      "NewMessage.thread_depth": "Thread nesting depth (0 = root message, 1+ = nested reply)",
      "NewMessage.reply_count": "Total number of replies to this message (all descendants)"
    },
    "notes": [
      "All multi-byte integers use big-endian byte order.",
      "Strings are UTF-8 encoded with uint16 length prefix (max 65535 bytes).",
      "Optional fields use a presence byte (1=present, 0=absent) followed by value if present.",
      "Maximum frame size is 1 MB (1,048,576 bytes) to prevent DoS attacks.",
      "Clients must send PING every 30 seconds to avoid session timeout (60s inactivity)."
    ],
    "messages": [
      {
        "code": "0x01",
        "name": "AUTH_REQUEST",
        "direction": "client_to_server",
        "payload_type": "AuthRequest",
        "description": "Authenticate with password",
        "notes": "Used when connecting to use a registered nickname. Server responds with AUTH_RESPONSE.",
        "example": {
          "description": "User 'alice' authenticating with password 'hunter2'",
          "bytes": [0, 5, 97, 108, 105, 99, 101, 0, 7, 104, 117, 110, 116, 101, 114, 50],
          "decoded": {
            "nickname": "alice",
            "password": "hunter2"
          }
        }
      },
      {
        "code": "0x81",
        "name": "AUTH_RESPONSE",
        "direction": "server_to_client",
        "payload_type": "AuthResponse",
        "description": "Authentication result",
        "notes": [
          "**If success:** user_id contains the registered user's ID, nickname contains the authenticated user's registered nickname, message contains welcome message or empty.",
          "**If failed:** user_id and nickname are omitted, message contains error description.",
          "**NOTE:** The nickname field was added in V2 to support SSH authentication, where the client needs to know their authenticated nickname without sending SET_NICKNAME."
        ]
      },
      {
        "code": "0x02",
        "name": "SET_NICKNAME",
        "direction": "client_to_server",
        "payload_type": "SetNickname",
        "description": "Set or change nickname",
        "notes": [
          "Rejected if nickname is already taken.",
          "Rejected if nickname contains invalid characters.",
          "If successful, all connected clients receive NEW_MESSAGE notification with system message."
        ]
      },
      {
        "code": "0x82",
        "name": "NICKNAME_RESPONSE",
        "direction": "server_to_client",
        "payload_type": "NicknameResponse",
        "description": "Nickname change result",
        "notes": [
          "On success, message contains welcome text.",
          "On failure, message contains error reason (e.g., 'nickname already taken')."
        ]
      },
      {
        "code": "0x03",
        "name": "REGISTER_USER",
        "direction": "client_to_server",
        "payload_type": "RegisterUser",
        "description": "Register current nickname with password"
      },
      {
        "code": "0x83",
        "name": "REGISTER_RESPONSE",
        "direction": "server_to_client",
        "payload_type": "RegisterResponse",
        "description": "Registration result"
      },
      {
        "code": "0x04",
        "name": "LIST_CHANNELS",
        "direction": "client_to_server",
        "payload_type": "ListChannels",
        "description": "Request list of available channels"
      },
      {
        "code": "0x84",
        "name": "CHANNEL_LIST",
        "direction": "server_to_client",
        "payload_type": "ChannelList",
        "description": "List of channels"
      },
      {
        "code": "0x05",
        "name": "JOIN_CHANNEL",
        "direction": "client_to_server",
        "payload_type": "JoinChannel",
        "description": "Join a channel/subchannel"
      },
      {
        "code": "0x85",
        "name": "JOIN_RESPONSE",
        "direction": "server_to_client",
        "payload_type": "JoinResponse",
        "description": "Join result with channel data"
      },
      {
        "code": "0x09",
        "name": "LIST_MESSAGES",
        "direction": "client_to_server",
        "payload_type": "ListMessages",
        "description": "Request messages from channel/subchannel"
      },
      {
        "code": "0x89",
        "name": "MESSAGE_LIST",
        "direction": "server_to_client",
        "payload_type": "MessageList",
        "description": "List of messages"
      },
      {
        "code": "0x0A",
        "name": "POST_MESSAGE",
        "direction": "client_to_server",
        "payload_type": "PostMessage",
        "description": "Post a new message",
        "notes": [
          "Create a new message in a channel.",
          "If parent_id is set, this is a reply. Otherwise, it's a root message.",
          "If subchannel_id is not present, post to the channel at the root level (for channels without subchannels)."
        ]
      },
      {
        "code": "0x8A",
        "name": "MESSAGE_POSTED",
        "direction": "server_to_client",
        "payload_type": "MessagePosted",
        "description": "Message post confirmation",
        "notes": [
          "Sent in response to POST_MESSAGE.",
          "Contains the new message ID on success.",
          "If failed, message contains error description."
        ]
      },
      {
        "code": "0x8D",
        "name": "NEW_MESSAGE",
        "direction": "server_to_client",
        "payload_type": "NewMessage",
        "description": "Real-time message notification",
        "notes": [
          "Real-time notification of a new message (pushed to all users in the channel).",
          "Uses the same format as a single message in MESSAGE_LIST.",
          "**author_user_id** is null for anonymous users.",
          "**thread_depth:** 0=root, 1+=nested.",
          "**reply_count:** Total number of replies (all descendants)."
        ]
      },
      {
        "code": "0x10",
        "name": "PING",
        "direction": "client_to_server",
        "payload_type": "Ping",
        "description": "Keepalive heartbeat"
      },
      {
        "code": "0x90",
        "name": "PONG",
        "direction": "server_to_client",
        "payload_type": "Pong",
        "description": "Ping response"
      },
      {
        "code": "0x91",
        "name": "ERROR",
        "direction": "server_to_client",
        "payload_type": "Error",
        "description": "Generic error response"
      },
      {
        "code": "0x98",
        "name": "SERVER_CONFIG",
        "direction": "server_to_client",
        "payload_type": "ServerConfig",
        "description": "Server configuration and limits"
      }
    ],
    "message_groups": [
      {
        "name": "Authentication",
        "messages": ["0x01", "0x81", "0x02", "0x82"],
        "description": "User authentication and nickname management"
      },
      {
        "name": "Messaging",
        "messages": ["0x0A", "0x8A", "0x8D"],
        "description": "Creating and receiving messages"
      }
    ],
    "constants": {
      "MAX_FRAME_SIZE": {
        "value": 1048576,
        "description": "Maximum allowed frame size (1 MB)",
        "type": "uint32"
      },
      "MAX_MESSAGE_LENGTH": {
        "value": 4000,
        "description": "Maximum message content length in characters",
        "type": "uint32"
      },
      "SESSION_TIMEOUT": {
        "value": 60000,
        "description": "Session timeout in milliseconds (60 seconds of inactivity)",
        "type": "uint32"
      }
    }
  }
}
