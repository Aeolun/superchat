{
  "protocol": {
    "name": "SensorNet Protocol",
    "version": "2.0",
    "types_schema": "./sensornet-types.json",
    "description": "A lightweight binary protocol for IoT sensor devices to report telemetry data to a central hub.",

    "header_format": "Packet",

    "header_size_field": "size",

    "header_example": {
      "decoded": {
        "msg_type": 1,
        "device_id": 12345,
        "sequence_num": 42
      }
    },

    "field_descriptions": {
      "Packet.size": "Total size of the packet excluding the size field itself (2 bytes)",
      "Packet.msg_type": "Message type identifier (1-255)",
      "Packet.device_id": "Unique device identifier assigned during provisioning",
      "Packet.sequence_num": "Incrementing sequence number for duplicate detection",

      "SensorReading.sensor_type": "Sensor type: 0=temperature, 1=humidity, 2=pressure, 3=light, etc.",
      "SensorReading.battery_low": "Battery low warning flag (1=low, 0=normal)",
      "SensorReading.error": "Error flag (1=sensor error, 0=normal)",
      "SensorReading.reserved": "Reserved bits for future use",
      "SensorReading.timestamp": "Unix timestamp in seconds (device time)",
      "SensorReading.value": "Sensor reading value (interpretation depends on sensor_type)",
      "SensorReading.location": "Optional GPS location ID (present if device has GPS enabled)",

      "ConfigUpdate.interval": "Reporting interval in seconds",
      "ConfigUpdate.threshold": "Alert threshold value",

      "Acknowledgment.status": "Status code: 0=success, 1=error, 2=retry"
    },

    "notes": [
      "All multi-byte integers use **little-endian** byte order.",
      "Devices must increment sequence_num for each packet sent.",
      "Hub responds to SENSOR_READING with ACK if status is abnormal.",
      "Maximum packet size is 256 bytes."
    ],

    "messages": [
      {
        "code": "0x01",
        "name": "SENSOR_READING",
        "direction": "client_to_server",
        "payload_type": "SensorReading",
        "description": "Periodic sensor data report",
        "notes": [
          "Sent at configured intervals or when threshold is exceeded.",
          "**Bitfield encoding:** sensor_type occupies bits 0-3, battery_low is bit 4, error is bit 5, reserved bits 6-7.",
          "Timestamp should be synchronized via NTP when possible."
        ],
        "example": {
          "description": "Temperature sensor (type=0) reading 23.5Â°C with GPS location ID 42",
          "bytes": [0, 192, 11, 92, 97, 0, 0, 188, 65, 1, 42, 0, 0, 0],
          "decoded": {
            "sensor_type": 0,
            "battery_low": 0,
            "error": 0,
            "reserved": 0,
            "timestamp": 1633017600,
            "value": 23.5,
            "location": 42
          }
        }
      },
      {
        "code": "0x02",
        "name": "CONFIG_UPDATE",
        "direction": "server_to_client",
        "payload_type": "ConfigUpdate",
        "description": "Update device configuration",
        "notes": "Device should respond with ACK after applying configuration."
      },
      {
        "code": "0x03",
        "name": "ACK",
        "direction": "bidirectional",
        "payload_type": "Acknowledgment",
        "description": "Acknowledgment message",
        "notes": "Used to confirm receipt of critical messages."
      }
    ]
  }
}
