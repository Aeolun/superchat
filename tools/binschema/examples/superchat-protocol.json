{
  "protocol": {
    "name": "SuperChat Protocol",
    "version": "1.0",
    "types_schema": "./superchat-types.json",
    "description": "A lightweight binary protocol for real-time threaded chat communication between SuperChat clients and servers.",

    "header_format": "FrameHeader",

    "field_descriptions": {
      "FrameHeader.length": "Total size of Version + Type + Flags + Payload (excludes the length field itself)",
      "FrameHeader.version": "Protocol version (current: 1). Both client and server must validate on every message.",
      "FrameHeader.type": "Message type identifier (0x01-0xFF)",
      "FrameHeader.flags": "Bit flags: bit 0=compression (LZ4), bit 1=encryption, bits 2-7 reserved",

      "AuthRequest.nickname": "User's nickname (3-32 characters)",
      "AuthRequest.password": "User's password (8-128 characters, hashed with bcrypt)",

      "AuthResponse.success": "1 if authentication succeeded, 0 if failed",
      "AuthResponse.user_id": "The authenticated user's ID (only present if success=1)",
      "AuthResponse.nickname": "The authenticated user's registered nickname (only present if success=1)",
      "AuthResponse.message": "Welcome message on success, error description on failure",

      "SetNickname.nickname": "Desired nickname (3-32 characters, alphanumeric + underscore)",

      "NicknameResponse.success": "1 if nickname was set successfully, 0 if rejected",
      "NicknameResponse.nickname": "The actual nickname that was set (may differ from request)",
      "NicknameResponse.message": "Confirmation message or error description",

      "PostMessage.channel_id": "Target channel ID",
      "PostMessage.parent_id": "Parent message ID for threaded replies (null for top-level posts)",
      "PostMessage.content": "Message content (max 4000 characters)",

      "MessagePosted.success": "1 if message was posted successfully, 0 if failed",
      "MessagePosted.message_id": "The ID of the newly created message",
      "MessagePosted.error": "Error description (only present if success=0)",

      "NewMessage.message_id": "Unique message ID",
      "NewMessage.channel_id": "Channel this message belongs to",
      "NewMessage.parent_id": "Parent message ID (null for top-level messages)",
      "NewMessage.author": "Nickname of the message author",
      "NewMessage.content": "Message text content",
      "NewMessage.created_at": "Unix timestamp in milliseconds (server time)"
    },

    "notes": [
      "All multi-byte integers use big-endian byte order.",
      "Strings are UTF-8 encoded with uint16 length prefix (max 65535 bytes).",
      "Optional fields use a presence byte (1=present, 0=absent) followed by value if present.",
      "Maximum frame size is 1 MB (1,048,576 bytes) to prevent DoS attacks.",
      "Clients must send PING every 30 seconds to avoid session timeout (60s inactivity)."
    ],

    "messages": [
      {
        "code": "0x01",
        "name": "AUTH_REQUEST",
        "direction": "client_to_server",
        "payload_type": "AuthRequest",
        "description": "Authenticate with password",
        "notes": "Used when connecting to use a registered nickname. Server responds with AUTH_RESPONSE.",
        "example": {
          "description": "User 'alice' authenticating with password 'hunter2'",
          "bytes": [0, 5, 97, 108, 105, 99, 101, 0, 7, 104, 117, 110, 116, 101, 114, 50],
          "decoded": {
            "nickname": { "data": [97, 108, 105, 99, 101] },
            "password": { "data": [104, 117, 110, 116, 101, 114, 50] }
          }
        }
      },
      {
        "code": "0x81",
        "name": "AUTH_RESPONSE",
        "direction": "server_to_client",
        "payload_type": "AuthResponse",
        "description": "Authentication result",
        "notes": "Contains user_id and nickname if successful, error message if failed."
      },
      {
        "code": "0x02",
        "name": "SET_NICKNAME",
        "direction": "client_to_server",
        "payload_type": "SetNickname",
        "description": "Set or change nickname",
        "notes": "Used for initial nickname setup or changing nickname. Anonymous users (no auth) can use any available nickname."
      },
      {
        "code": "0x82",
        "name": "NICKNAME_RESPONSE",
        "direction": "server_to_client",
        "payload_type": "NicknameResponse",
        "description": "Nickname change result",
        "notes": "Confirms whether nickname was accepted or provides error (nickname taken, invalid format, etc.)"
      },
      {
        "code": "0x0A",
        "name": "POST_MESSAGE",
        "direction": "client_to_server",
        "payload_type": "PostMessage",
        "description": "Post a new message",
        "notes": "Create a new message in a channel. Set parent_id to create a threaded reply, or omit for top-level post."
      },
      {
        "code": "0x8A",
        "name": "MESSAGE_POSTED",
        "direction": "server_to_client",
        "payload_type": "MessagePosted",
        "description": "Message post confirmation",
        "notes": "Sent in response to POST_MESSAGE. Contains the new message ID on success."
      },
      {
        "code": "0x8D",
        "name": "NEW_MESSAGE",
        "direction": "server_to_client",
        "payload_type": "NewMessage",
        "description": "Real-time message notification",
        "notes": "Broadcasted to all users subscribed to a channel when a new message is posted. Clients should update their UI immediately."
      }
    ],

    "message_groups": [
      {
        "name": "Authentication",
        "messages": ["0x01", "0x81", "0x02", "0x82"],
        "description": "User authentication and nickname management"
      },
      {
        "name": "Messaging",
        "messages": ["0x0A", "0x8A", "0x8D"],
        "description": "Creating and receiving messages"
      }
    ],

    "constants": {
      "MAX_FRAME_SIZE": {
        "value": 1048576,
        "description": "Maximum allowed frame size (1 MB)",
        "type": "uint32"
      },
      "MAX_MESSAGE_LENGTH": {
        "value": 4000,
        "description": "Maximum message content length in characters",
        "type": "uint32"
      },
      "SESSION_TIMEOUT": {
        "value": 60000,
        "description": "Session timeout in milliseconds (60 seconds of inactivity)",
        "type": "uint32"
      }
    }
  }
}
